#include <GLFW/glfw3.h>
#include <math.h>
int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(650, 480, "Desenho triangulo", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    glClearColor(0.0, 0.15, 0.25, 1.0);// cor de fundo
    glPolygonMode(GL_FRONT_AND_BACK, GL_POINT);// pontilhiado
    glLineWidth(4.f);
    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
        /* Poll for and process events */
        glfwPollEvents();
        if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        {
            glfwSetWindowShouldClose(window, GLFW_TRUE);
        }

        /* Render here */
        glClear(GL_COLOR_BUFFER_BIT);

        glColor3f(1.0, 0.0, 0.0);
        glBegin(GL_POINTS);
        float radius = 0.0f;

        for (float angle = 0; angle < 1440; angle += 1)
        {
            x = cos(angle * M_PI / 180) * radius;
            y = sin(angle * M_PI / 180) * radius;
            radius += 0.1f;
            glVertex2f(x, y);
        }
        glEnd();
        /* Swap front and back buffers */
        glfwSwapBuffers(window);
    }

    glfwTerminate();
    return 0;
}
